
/* 
defaultColours
- TRUE: non-matching components will be reseted to default color
- FALSE: non-matching components will be left to their current color
*/
var defaultColours = false;

/*
debug
- TRUE: more verbose in console for debug purpose
- FALSE: no information logged to the console
*/
var debug = false;

/*
Fetch arguments
*/
var arguments = $.process.argv;
var coloring = "";

for(i = 0; i < arguments.length; i++) {
	if (arguments[i] == "-coloring") {
		coloring = arguments[i+1];
	}
}

console.log("Coloring parameter: " + coloring);

/*
If arguments are empty, prompt user
*/
if (coloring == "") {
	var promptTxt = "Please select colloring option:\n";
	var promptTxt = promptTxt + "1 - Expected coverage\n"
	var promptTxt = promptTxt + "2 - MRV"
	coloring = window.prompt(promptTxt, "");
}

/*
paramPropValue
- for each group of property/value, define the color to be used to fill element
- color is to be defined using HTML code: #RRGGBB
- use "default" to reset element to Archi default color
*/
if (coloring == "1") {
	var paramPropValue = [
		{prop:"Couverture attendue - Evaluation", value:"0-Non souhaité", color:"#FFFFB5", fontColor:"#000000" },
		{prop:"Couverture attendue - Evaluation", value:"1-Souhaité", color:"#C0FFC0", fontColor:"#000000" },
		{prop:"Couverture attendue - Evaluation", value:"2-Attendu", color:"#40FF40", fontColor:"#000000" }
	];
	performColoring = 1;
	
} else if (coloring == "2") {
	var paramPropValue = [
		{prop:"Applicable MRV", value:"Non", color:"#E3E3E3", fontColor:"#808080" },
		{prop:"Applicable MRV", value:"Oui", color:"#FFFFB5", fontColor:"#000000" }
	];
	performColoring = 1;

} else {
	window.alert("Coloring option not valid!");
	performColoring = 0;
}

if (performColoring == "1") {
/*	console.show();
	console.clear();
*/
					
	$("archimate-diagram-model").each(function(theView) {
		if (theView.prop("viewType") == "SIPOC") {
			$(theView).find().not("relationship").not("diagram-model-group").not("diagram-model-note").each(function(e) {
				if (e.type == "capability" || e.type == "business-object") {
					e.fillColor = null;
					e.fontColor = null;
					e.iconColor = null;
				} else {
					/* Walkthrough all elements of the view */
					if (e.specialization == "Question") {
						e.fillColor = "#FF0000";
						e.fontColor = "#FFFFFF";
						e.iconColor = "#FFFFFF";
					}

					debug ? console.log(e.name) : true;
					
					theProps = e.prop();
					for (var i=0; i<theProps.length; i++) {
						/* Get current property and its value */
						currentPropValue = {prop:theProps[i], value:e.prop(theProps[i])};
						
						debug ? console.log(currentPropValue) : true;
						
						/* Search for the property/value within the paramPropValue parameter */
						var index;
						paramPropValue.findIndex(function(item, idx) {
							if (item.prop == currentPropValue.prop && item.value == currentPropValue.value) {
								index = idx;
								return true;
							}
							}
						);
						debug ? console.log(index) : true;
						
						if (index >= 0) {
							/* Color instruction detected so color element as defined */
							if (paramPropValue[index].color == "default") {
								e.fillColor = null;
							} else {
								e.fillColor = paramPropValue[index].color;
							}

							if (paramPropValue[index].fontColor == "default") {
								e.fontColor = null;
								e.iconColor = null;
							} else {
								e.fontColor = paramPropValue[index].fontColor;
								e.iconColor = paramPropValue[index].fontColor;
							}
						} else {
							/* Color instruction not detected so use global parameter to reset color or not */
							if (defaultColours) {
								e.fillColor = null;
								e.fontColor = null;
								e.iconColor = null;
							}
						}
					}
				}
			})
		}
	})
}